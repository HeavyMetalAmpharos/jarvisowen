<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//obj_player
//variable declarations

//friction = 0.5;

// initialize gravity to 1
grav = 1;

//initialize horizontal and vertical speed
hspeed = 0;
vspeed = 0;

//initialize jump/movement speed, number of current and possible jumps
jumpspeed = 30;
movespeed = 5;
numjumps = 0;
maxjumps = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Set gravity
if (vspeed &lt; 10) vspeed += grav;

//Set friction
if (abs(speed) &gt; 0){
    friction =0.5;
    }
else{
    friction = 0;
    }
/*

MOVEMENT

*/
// Check left and right arrow keys, also 'W', 'A' respectively
if ((keyboard_check(vk_right) || keyboard_check(ord('D'))) &amp;&amp; hspeed &lt; 10 &amp;&amp; !place_meeting(x+hspeed, y, obj_wall)){
    hspeed += movespeed;
}

if ((keyboard_check(vk_left) || keyboard_check(ord('A'))) &amp;&amp; hspeed &gt; -10 &amp;&amp; !place_meeting(x+hspeed, y, obj_wall)){
    hspeed += -movespeed;
}
if(keyboard_check(ord('P'))) {
    game_restart();
}
if (keyboard_check_pressed(ord('V'))) {
    vspeed = 0;
    hspeed += sign(hspeed)*2*movespeed;
    }
if (keyboard_check_pressed(ord('T'))) {
    x += sign(hspeed)*100;
    }
// Check for spacebar input, jump when spacebar is pressed, only works if colliding with a wall or the floor
if (keyboard_check_pressed(vk_space) &amp;&amp; numjumps != 0 &amp;&amp; ((place_meeting(x, y+1, obj_wall)) || place_meeting(x+hspeed,y, obj_wall))){
// If player is on the floor, jump normally
    if (place_meeting(x, y+1, obj_wall)) {
        vspeed += -jumpspeed;
        numjumps--;
    }
// If player is touching a wall, jump up and away from the wall
    else if (place_meeting(x+hspeed, y, obj_wall)) {
        vspeed += -jumpspeed;
        hspeed -= 20*sign(hspeed);
        numjumps--;
    }
}
/*

COLLISION

*/
// Horizontal Collision

// If, given the current horizontal speed, the object will collide with the wall at the next frame
if (place_meeting(x+hspeed, y, obj_wall)){
// Allow wall sliding, reset number of jumps to 1
    vspeed -= 0.5*grav;
    numjumps = maxjumps;
    
    
// If the player is more than 1 pixel from colliding, move 1 pixel towards until they collide
    while (!place_meeting(x+sign(hspeed), y, obj_wall)){
        x += sign(hspeed);        
    }
// Once the player is within 1 pixel of the wall, stop their movement    
    hspeed = 0;
}
// Vertical Collision
if (place_meeting(x, y+vspeed, obj_wall)){
    numjumps = maxjumps;
    while (!place_meeting(x, y+sign(vspeed), obj_wall)){
        y += sign(vspeed);
    }
    vspeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
